# Production Docker Compose Configuration
# Optimized for Google Cloud VM (e2-small: 2 vCPU, 2GB RAM)
# Use nginx installed on the host machine for reverse proxy

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dental-erp-postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dental_erp}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Performance tuning for small VM
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d
    # Shared memory for better PostgreSQL performance
    shm_size: 256mb
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-dental_erp}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dental-erp-redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru --save 60 1000
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Backend API (Production Build)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: dental-erp-backend:latest
    container_name: dental-erp-backend
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-dental_erp}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      FRONTEND_URL: ${FRONTEND_URL:-https://yourdomain.com}
      MOCK_INTEGRATIONS: ${MOCK_INTEGRATIONS:-false}
      ENABLE_AUDIT_LOGGING: "true"
      SENTRY_DSN: ${SENTRY_DSN:-}
    ports:
      # Expose to host for nginx to proxy
      - "127.0.0.1:3001:3001"
    volumes:
      # Optional: persist logs
      - ./logs/backend:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backend
      - frontend
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 768M
        reservations:
          cpus: '0.5'
          memory: 512M

  # Frontend (Production Build with Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-/api}
    image: dental-erp-frontend:latest
    container_name: dental-erp-frontend
    restart: always
    ports:
      # Expose to host for nginx to proxy
      - "127.0.0.1:3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - frontend
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Note: Nginx runs on the host machine, not in Docker
  # This reduces overhead and simplifies SSL management
  # Install nginx on host: sudo apt-get install nginx
  # Use certbot for SSL: sudo certbot --nginx

  # Backup service (optional - use cron on host instead for better reliability)
  # To enable: docker-compose --profile backup up -d backup
  backup:
    image: postgres:15-alpine
    container_name: dental-erp-backup
    restart: "no"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dental_erp}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
    command: >
      sh -c '
        apk add --no-cache dcron &&
        echo "0 2 * * * PGPASSWORD=$$POSTGRES_PASSWORD pg_dump -h dental-erp-postgres -U $$POSTGRES_USER $$POSTGRES_DB | gzip > /backups/backup_$$(date +\%Y\%m\%d_\%H\%M\%S).sql.gz && find /backups -name \"backup_*.sql.gz\" -mtime +30 -delete" > /etc/crontabs/root &&
        crond -f -l 2
      '
    networks:
      - backend
    profiles:
      - backup
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

volumes:
  postgres_data:
    driver: local
    # Data persists in Docker managed volume
    # Backup regularly using the backup script!
  redis_data:
    driver: local

networks:
  backend:
    driver: bridge
    name: dental-erp-backend
  frontend:
    driver: bridge
    name: dental-erp-frontend
